1 What do you understand By Database
-> A database is an organized collection of structured information, or data,
   typically stored electronically in a computer system. A database is usually 
   controlled by a database management system (DBMS).


2 What is Normalization?
-> Normalization is the process of organizing data in a database. It includes creating 
   tables and establishing relationships between those tables according to rules designed 
   both to protect the data and to make the database more flexible by eliminating redundancy
   and inconsistent dependency. 


3 What is Difference between DBMS and RDBMS?
-> DBMS stands for Database Management System, and RDBMS is the acronym for the Relational 
   Database Management system. In DBMS, the data is stored as a file, whereas in RDBMS, data 
   is stored in the form of tables.


4 What is MF Cod Rule of RDBMS Systems?
-> Codd's rule in DBMS also known as Codd's 12 rules/commandments is a set of thirteen rules 
   (numbered 0 to 12) that define a database to be a correct Relational Database Management 
   System (RDBMS). If a database follows Codd's 12 rules, it is called a True relational 
   database management system.


5  What do you understand By Data Redundancy?
-> Data redundancy occurs when the same piece of data exists in multiple places, whereas data 
   inconsistency is when the same data exists in different formats in multiple tables. Unfortunately,
   data redundancy can cause data inconsistency, which can provide a company with unreliable and/or 
   meaningless information.

6 What is DDL Interpreter?
-> DDL Interpreter DDL expands to Data Definition Language. DDL Interpreter as the name suggests interprets
   the DDL statements such as schema definition statements like create, delete, etc. The result of this interpretation
   is a set of a table that contains the meta-data which is stored in the data dictionary.


7  What is DML Compiler in SQL?
-> A data manipulation language (DML) is a computer programming language used for adding (inserting), deleting, and modifying 
   (updating) data in a database. A DML is often a sublanguage of a broader database language such as SQL, with the DML comprising 
   some of the operators in the language.


8  What is SQL Key Constraints writing an Example of SQL Key Constraints
-> SQL constraints are used to specify rules for the data in a table. Constraints are used to limit the type of data that can go into 
   a table. This ensures the accuracy and reliability of the data in the table. If there is any violation between the constraint and 
   the data action, the action is aborted.


9  What is save Point? How to create a save Point write a Query?
-> A SAVEPOINT is a point in a transaction in which you can roll the transaction back to a certain point without rolling back the entire
   transaction. Syntax for Savepoint command: SAVEPOINT SAVEPOINT_NAME; This command is used only in the creation of SAVEPOINT among all
   the transactions.


10  What is trigger and how to create a Trigger in SQL?
-> A trigger is a special type of stored procedure that automatically runs when an event occurs in the database server. DML triggers run
   when a user tries to modify data through a data manipulation language (DML) event. DML events are INSERT, UPDATE, or DELETE statements 
   on a table or view.






11
-------

-> CREATE TABLE student( RollNo int PRIMARY KEY AUTO_INCREMENT NOT NULL, Name varchar(30), Branch varchar(300) );

INSERT INTO `student` (`RollNo`, `Name`, `Branch`) VALUES
('1', 'Jay', 'Computer Science'),
(NULL, 'Suhani', 'Eletronic and com'),
(NULL, 'Kriti', 'Eletronic and Com');


CREATE TABLE Exam( RollNo int NOT NULL, FOREIGN KEY (RollNo) REFERENCES student(RollNo), S_code varchar(30), Marks Bigint(30), P_code varchar(30) );

INSERT INTO `exam` (`RollNo`, `S_code`, `Marks`, `P_code`) VALUES
('1', 'CS11', '50', 'CS'), ('1', 'CS12', '60', 'CS'),
('2', 'EC101', '66', 'EC'), ('2', 'EC102', '70', 'EC'),
('3', 'EC101', '45', 'EC'), ('3', 'EC102', '50', 'EC');

-> CREATE TABLE Employee( Employee_id int(5), First_Name varchar(30), Last_Name varchar(30), Salary bigint (30), Joining_Date varchar(30), Department varchar(30) );



INSERT INTO `employee` (`Employee_id`, `First_Name`, `Last_Name`, `Salary`, `Joining_Date`, `Department`) VALUES 
('1', 'John', 'Abraham', '1000000', '01-JAN-13', 'Banking'), 
('2', 'Michael', 'Clarke', '800000', '01-JAN-13', 'Insurance'), 
('3', 'Roy', 'Thomas', '7000000', '01-FEB-13', 'Banking'), 
('4', 'Tom', 'Jose', '6000000', '01-FEB-13', 'Insurance'), 
('5', 'Jerry', 'Pinto', '6500000', '01-FEB-13','Insurance'), 
('6', 'Pjilip', 'Mathew', '7500000', '01-JAN-13','Services'), 
('7', 'Testname1', '123', '650000', '01-JAN-13','Services'), 
('8', 'Testname2', 'Lname%', '6000000', '01-FEB-13','Insurance');

CREATE TABLE Incentive( Employee_ref_id int (5), Incentive_Date varchar (30), Incentive_amount bigint (50) );



INSERT INTO `incentive` (`Employee_ref_id`, `Incentive_Date`, `Incentive_amount`) VALUES 
('1', '01-FEB-13', '5000'), 
('2', '01-FEB-13', '3000'), 
('3', '01-FEB-13', '4000'), 
('1', '01-JAN-13', '4500'), 
('2', '01-JAN-13', '3500');

12-Retrieve the below data from above table

13- SELECT * FROM Customer WHERE OrderAmount > 1000;
 
14- SELECT Name, City FROM Salesperson WHERE City = 'London' AND Commission > 0.12;
 
15- SELECT * FROM Salesperson WHERE City IN (Barcelona, London);

16- SELECT * FROM Salesperson WHERE Commission > 0.10 AND Commission < 0.12;

17- SELECT * FROM Customer WHERE Rating > 100 OR (Rating <= 100 AND City = 'Rome');

18
->CREATE TABLE Salesperson (
    salesman_id INT PRIMARY KEY,
    name VARCHAR(255),
    city VARCHAR(255),
    commission DECIMAL(5, 2)
);

SELECT salesman_id, name, city, commission
   FROM Salesperson;

salesman_id | name | city | commission

5001  James Hoog New York  0.15
5002  Nail Knite Paris     0.13
5005  Pit Alex   London    0.11
5006  Mc Lyon    Paris     0.14
5007  Paul Adam  Rome      0.13
5003  Lauson Hen San Jose  0.12

19
->CREATE TABLE Orders (
    ord_no INT PRIMARY KEY,
    purch_amt DECIMAL(10, 2),
    ord_date DATE,
    customer_id INT,
    salesman_id INT
);
INSERT INTO Orders (ord_no, purch_amt, ord_date, customer_id, salesman_id);

SELECT ord_no, ord_date, purch_amt
FROM Orders
WHERE salesman_id = 5001;

table: orders
ord_no purch_amt ord_date customer_id salesman_id
70001 150.5 2012-10-05 3005 5002
70009 270.65 2012-09-10 3001 5005
70002 65.26 2012-10-05 3002 5001
70004 110.5 2012-08-17 3009 5003
70007 948.5 2012-09-10 3005 5002
70005 2400.6 2012-07-27 3007 5001
70008 5760 2012-09-10 3002 5001
70010 1983.43 2012-10-10 3004 5006
70003 2480.4 2012-10-10 3009 5003
70012 250.45 2012-06-27 3008 5002
70011 75.29 2012-08-17 3003 5007
70013 3045.6 2012-04-25 3002 5001

20
->SELECT pro_id, pro_name, pro_price, pro_com
  FROM Products
  WHERE pro_price BETWEEN 200.00 AND 600.00;

table: item_mast
PRO_ID PRO_NAME     PRO_PRICE PRO_COM
101    Mother Board 3200.00     15
102    Key Board    450.00      16
103    ZIP drive    250.00      14
104    Speaker      550.00      16
105    Monitor      5000.00     11
106    DVD drive    900.00      12
107    CD drive     800.00      12
108    Printer      2600.00     13
109    Refill
       cartridge    350.00      13
110    Mouse        250.00      12

21
->SELECT AVG(pro_price) AS avg_price
  FROM Products
  WHERE pro_com = 16;

table: item_mast
PRO_ID PRO_NAME     PRO_PRICE PRO_COM
101    Mother Board 3200.00     15
102    Key Board    450.00      16
103    ZIP drive    250.00      14
104    Speaker      550.00      16
105    Monitor      5000.00     11
106    DVD drive    900.00      12
107    CD drive     800.00      12
108    Printer      2600.00     13
109    Refill
       cartridge    350.00      13
110    Mouse        250.00      12

22
->SELECT pro_name AS 'Item Name', pro_price AS 'Price in Rs.' 
  FROM Products;

table: item_mast
PRO_ID PRO_NAME     PRO_PRICE PRO_COM
101    Mother Board 3200.00     15
102    Key Board    450.00      16
103    ZIP drive    250.00      14
104    Speaker      550.00      16
105    Monitor      5000.00     11
106    DVD drive    900.00      12
107    CD drive     800.00      12
108    Printer      2600.00     13
109    Refill
       cartridge    350.00      13
110    Mouse        250.00      12

23
->SELECT pro_name, pro_price
  FROM Products
  WHERE pro_price >= 250
  ORDER BY pro_price DESC, pro_name ASC;

table: item_mast
PRO_ID PRO_NAME     PRO_PRICE PRO_COM
101    Mother Board 3200.00     15
102    Key Board    450.00      16
103    ZIP drive    250.00      14
104    Speaker      550.00      16
105    Monitor      5000.00     11
106    DVD drive    900.00      12
107    CD drive     800.00      12
108    Printer      2600.00     13
109    Refill
       cartridge    350.00      13
110    Mouse        250.00      12

24
->SELECT pro_com AS company_code, AVG(pro_price) AS average_price
  FROM Products
  GROUP BY pro_com;

table: item_mast
PRO_ID PRO_NAME     PRO_PRICE PRO_COM
101    Mother Board 3200.00     15
102    Key Board    450.00      16
103    ZIP drive    250.00      14
104    Speaker      550.00      16
105    Monitor      5000.00     11
106    DVD drive    900.00      12
107    CD drive     800.00      12
108    Printer      2600.00     13
109    Refill
       cartridge    350.00      13
110    Mouse        250.00      12
